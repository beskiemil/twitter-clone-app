generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "sqlite"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Example {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id              String      @id @default(cuid())
    name        String      @unique
    email           String      @unique
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    emailVerified DateTime?
    image         String?
    sessions      Session[]
    accounts      Account[]
    roles           Role[]
    tweets          Tweet[]
    likes           Like[]
    follows         Follow[]    @relation("UserFollows")
    followers       Follow[]    @relation("UserFollowers")
    retweets        Retweet[]
    comments        Comment[]
    messagesSent    Message[]   @relation("MessagesSent")
    messagesReceived Message[]  @relation("MessagesReceived")

}

model Role {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String   @unique
  users     User[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Tweet {
    id              String      @id @default(cuid())
    createdAt       DateTime    @default(now())
    updatedAt       DateTime    @updatedAt
    content         String
    authorId        String
    author          User        @relation(fields: [authorId], references: [id])
    likes           Like[]
    retweets        Retweet[]
    comments        Comment[]
    hashtags        Hashtag[] 
    media           Media[]
}

model Retweet {
    id              String      @id @default(cuid())
    createdAt       DateTime    @default(now())
    tweetId         String
    tweet           Tweet       @relation(fields: [tweetId], references: [id])
    userId          String
    user            User        @relation(fields: [userId], references: [id])
}

model Like {
    id              String      @id @default(cuid())
    createdAt       DateTime    @default(now())
    tweetId         String
    tweet           Tweet       @relation(fields: [tweetId], references: [id])
    userId          String
    user            User        @relation(fields: [userId], references: [id])
}

model Comment {
    id              String      @id @default(cuid())
    createdAt       DateTime    @default(now())
    content         String
    tweetId         String
    tweet           Tweet       @relation(fields: [tweetId], references: [id])
    authorId        String
    author          User        @relation(fields: [authorId], references: [id])
}

model Follow {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    followingId String   
    followerId  String   
    following   User     @relation("UserFollows", fields: [followingId], references: [id])
    follower    User     @relation("UserFollowers", fields: [followerId], references: [id])
}

model Hashtag {
    id              String      @id @default(cuid())
    createdAt       DateTime    @default(now())
    name            String      @unique
    tweets          Tweet[]    
}

model Media {
    id              String      @id @default(cuid())
    createdAt       DateTime    @default(now())
    url             String
    tweetId         String
    tweet           Tweet       @relation(fields: [tweetId], references: [id])
}

model Message {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    content      String
    senderId     String   
    recipientId  String  
    sender       User     @relation("MessagesSent", fields: [senderId], references: [id])
    recipient    User     @relation("MessagesReceived", fields: [recipientId], references: [id])
}
